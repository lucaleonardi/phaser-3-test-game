{"version":3,"sources":["src/CST.ts","src/scenes/LoadScene.ts","src/scenes/MenuScene.ts","src/CharacterSprite.ts","src/scenes/PlayScene.ts","src/main.ts"],"names":[],"mappings":"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","file":"main.3b0b3eec.js","sourceRoot":"..","sourcesContent":["export const CST = {\r\n  SCENES: {\r\n    LOAD: \"LOAD\",\r\n    MENU: \"MENU\",\r\n    PLAY: \"PLAY\"\r\n  },\r\n  IMAGE: {\r\n    LOGO: \"logo.png\",\r\n    OPTIONS: \"options_button.png\",\r\n    PLAY: \"play_button.png\",\r\n    TITLE: \"title_bg.jpg\"\r\n  },\r\n  AUDIO: {\r\n    TITLE: \"main_theme.ogg\",\r\n    BTN_HOVER: \"button_hover.mp3\"\r\n  },\r\n  SPRITE: {\r\n    CAT: \"cat.png\",\r\n    anna: \"anna.png\"\r\n  }\r\n}","import { CST } from './../CST';\r\n\r\nexport class LoadScene extends Phaser.Scene {\r\n  constructor() {\r\n    super({\r\n      key: CST.SCENES.LOAD\r\n    })\r\n  }\r\n  \r\n  init() {\r\n\r\n  }\r\n\r\n  loadImages() {\r\n    this.load.setPath(\"./assets/image\");\r\n\r\n    for(let prop in CST.IMAGE) {\r\n      //@ts-ignore\r\n      this.load.image(CST.IMAGE[prop], CST.IMAGE[prop])\r\n    }\r\n  }\r\n  \r\n  loadAudio() {\r\n    this.load.setPath(\"./assets/audio\");\r\n\r\n    for(let prop in CST.AUDIO) {\r\n      //@ts-ignore\r\n      this.load.audio(CST.AUDIO[prop], CST.AUDIO[prop])\r\n    }\r\n  }\r\n\r\n  loadSprites(frameConfig?: Phaser.Types.Loader.FileTypes.ImageFrameConfig) {\r\n    this.load.setPath(\"./assets/sprite\");\r\n\r\n    for(let prop in CST.SPRITE) {\r\n      //@ts-ignore\r\n      this.load.spritesheet(CST.SPRITE[prop], CST.SPRITE[prop], frameConfig)\r\n    }\r\n\r\n  }\r\n\r\n  preload() {\r\n    this.load.spritesheet(\"anna\", \"./assets/sprite/anna.png\", {\r\n      frameWidth: 64,\r\n      frameHeight: 64\r\n    });\r\n\r\n    this.load.spritesheet(\"rapier\", \"./assets/sprite/rapier.png\", {\r\n      frameWidth: 192,\r\n      frameHeight: 192\r\n    });\r\n\r\n    this.load.atlas(\"characters\", \"./assets/sprite/characters.png\", \"./assets/sprite/characters.json\");\r\n    this.load.atlas(\"daze\", \"./assets/sprite/daze.png\", \"./assets/sprite/daze.json\");\r\n    this.load.atlas(\"explosions\", \"./assets/sprite/explosions.png\", \"./assets/sprite/explosions.json\");\r\n\r\n    // images, spritesheet and sound\r\n    this.loadImages();\r\n    this.loadAudio();\r\n    this.loadSprites({\r\n      frameWidth: 64,\r\n      frameHeight: 64\r\n    });\r\n    \r\n    // create loading bar\r\n    let loadingBar = this.add.graphics({\r\n      fillStyle: {\r\n        color: 0xffffff //white\r\n      }\r\n    });\r\n\r\n    this.load.on(\"progress\", (percent: number) => {\r\n      loadingBar.fillRect(0, this.game.renderer.height/2, this.game.renderer.width * percent, 50);\r\n    })\r\n\r\n    this.load.on(\"complete\", () => {\r\n      this.scene.start(CST.SCENES.MENU);\r\n    })\r\n\r\n    this.load.on(\"load\", (file: Phaser.Loader.File) => {\r\n      // console.log(file);\r\n    })\r\n  }\r\n\r\n  create() {\r\n    // this.scene.start(CST.SCENES.MENU, \"hello from LoadScene\");\r\n  }\r\n}","import { CST } from './../CST';\r\n\r\nexport class MenuScene extends Phaser.Scene {\r\n  constructor() {\r\n    super({\r\n      key: CST.SCENES.MENU\r\n    })\r\n  }\r\n  \r\n  init() {\r\n\r\n  }\r\n\r\n  preload() {\r\n\r\n  }\r\n\r\n  create() {\r\n    // create background and menu buttons\r\n    this.add.image(0, 0, CST.IMAGE.TITLE).setOrigin(0);\r\n    this.add.image(this.game.renderer.width/2, this.game.renderer.height * 0.2, CST.IMAGE.LOGO);\r\n    let playButton = this.add.image(this.game.renderer.width/2, this.game.renderer.height/2, CST.IMAGE.PLAY);\r\n    let optionButton = this.add.image(this.game.renderer.width/2, this.game.renderer.height/2 + 100, CST.IMAGE.OPTIONS);\r\n\r\n    let hoverSprite = this.add.sprite(100, 100, CST.SPRITE.CAT, 9);\r\n    hoverSprite.setScale(2);\r\n    hoverSprite.setVisible(false);\r\n\r\n    // this.sound.play(CST.AUDIO.TITLE, {\r\n    //   loop: true\r\n    // });\r\n\r\n    this.anims.create({\r\n      key: \"walk\",\r\n      frameRate: 4,\r\n      repeat: -1,\r\n      frames: this.anims.generateFrameNumbers(CST.SPRITE.CAT, {\r\n        frames: [1,5]\r\n      })\r\n    });\r\n  \r\n    // make buttons interactive\r\n    /**\r\n     *  PointerEvents:\r\n     *    pointerover - hovering\r\n     *    pointerout - not hovering\r\n     *    pointerup - click and release\r\n     *    pointerdown - just click\r\n     */\r\n    playButton.setInteractive();\r\n    optionButton.setInteractive();\r\n\r\n    playButton.on(\"pointerover\", () => {\r\n      hoverSprite.setVisible(true);\r\n      this.sound.play(CST.AUDIO.BTN_HOVER, {\r\n        volume: 0.1\r\n      });\r\n      hoverSprite.play(\"walk\");\r\n      hoverSprite.x = playButton.x - playButton.width;\r\n      hoverSprite.y = playButton.y;\r\n    });\r\n    \r\n    playButton.on(\"pointerout\", () => {\r\n      hoverSprite.setVisible(false);\r\n    });\r\n\r\n    playButton.on(\"pointerup\", () => {\r\n      this.scene.start(CST.SCENES.PLAY);\r\n    });\r\n\r\n    optionButton.on(\"pointerover\", () => {\r\n      hoverSprite.setVisible(true);\r\n      this.sound.play(CST.AUDIO.BTN_HOVER, {\r\n        volume: 0.1\r\n      });\r\n      hoverSprite.play(\"walk\");\r\n      hoverSprite.x = optionButton.x - optionButton.width;\r\n      hoverSprite.y = optionButton.y;\r\n    });\r\n    \r\n    optionButton.on(\"pointerout\", () => {\r\n      hoverSprite.setVisible(false);\r\n    });\r\n\r\n    optionButton.on(\"pointerup\", () => {\r\n      //this.scene.launch();\r\n    });\r\n  }\r\n}","export class CharacterSprite extends Phaser.Physics.Arcade.Sprite {\r\n  hp: number;\r\n  /**\r\n   * \r\n   */\r\n  constructor(scene: Phaser.Scene, x: number, y: number, texture: string, frame?: string | number) {\r\n    super(scene, x, y, texture, frame);\r\n    scene.sys.updateList.add(this);\r\n    scene.sys.displayList.add(this);\r\n    this.setScale(2);\r\n    this.setOrigin(0, 0);\r\n    scene.physics.world.enableBody(this);\r\n    this.setImmovable(true);\r\n\r\n    this.hp = 10;\r\n  }\r\n}","import { CST } from \"./../CST\";\r\nimport { CharacterSprite } from \"./../CharacterSprite\";\r\n\r\nexport class PlayScene extends Phaser.Scene {\r\n  anna!: Phaser.Physics.Arcade.Sprite;\r\n  hooded!: Phaser.Physics.Arcade.Sprite;\r\n  keyboard!: { [index: string]: Phaser.Input.Keyboard.Key };\r\n  assassins!: Phaser.Physics.Arcade.Group;\r\n  fireAttacks!: Phaser.Physics.Arcade.Group;\r\n  player!: Phaser.GameObjects.Container;\r\n\r\n  constructor() {\r\n    super({\r\n      key: CST.SCENES.PLAY,\r\n    });\r\n  }\r\n\r\n  preload() {\r\n    // this.anims.create({\r\n    //   key: \"dazzle\",\r\n    //   frameRate: 10,\r\n    //   repeat: -1,\r\n    //   frames: this.anims.generateFrameNames(\"daze\", {\r\n    //     prefix: \"daze0\",\r\n    //     suffix: \".png\",\r\n    //     start: 0,\r\n    //     end: 41\r\n    //   })\r\n    // });\r\n\r\n    // this.anims.create({\r\n    //   key: \"explosion1\",\r\n    //   frameRate: 21,\r\n    //   repeat: -1,\r\n    //   frames: this.anims.generateFrameNames(\"explosions\", {\r\n    //     prefix: \"explosion1_\",\r\n    //     suffix: \".png\",\r\n    //     start: 0,\r\n    //     end: 63\r\n    //   })\r\n    // });\r\n\r\n    // this.anims.create({\r\n    //   key: \"right\",\r\n    //   frameRate: 10,\r\n    //   frames: this.anims.generateFrameNames(\"hooded\", {\r\n    //     frames: [143, 144, 145, 146, 147, 148, 149, 150, 151]\r\n    //   })\r\n    // });\r\n\r\n    this.textures.addSpriteSheetFromAtlas(\"mandy\", {\r\n      frameWidth: 64,\r\n      frameHeight: 64,\r\n      atlas: \"characters\",\r\n      frame: \"mandy\",\r\n    });\r\n\r\n    this.anims.create({\r\n      key: \"mandyswordleft\",\r\n      frameRate: 5,\r\n      frames: this.anims.generateFrameNumbers(\"mandy\", {\r\n        start: 169,\r\n        end: 174,\r\n      }),\r\n    });\r\n\r\n    this.anims.create({\r\n      key: \"left\",\r\n      frameRate: 10,\r\n      frames: this.anims.generateFrameNames(\"anna\", {\r\n        start: 9,\r\n        end: 17,\r\n      }),\r\n    });\r\n\r\n    this.anims.create({\r\n      key: \"down\",\r\n      frameRate: 10,\r\n      frames: this.anims.generateFrameNames(\"anna\", {\r\n        start: 18,\r\n        end: 26,\r\n      }),\r\n    });\r\n\r\n    this.anims.create({\r\n      key: \"up\",\r\n      frameRate: 10,\r\n      frames: this.anims.generateFrameNames(\"anna\", {\r\n        start: 0,\r\n        end: 8,\r\n      }),\r\n    });\r\n\r\n    this.anims.create({\r\n      key: \"right\",\r\n      frameRate: 10,\r\n      frames: this.anims.generateFrameNames(\"anna\", {\r\n        start: 27,\r\n        end: 35,\r\n      }),\r\n    });\r\n\r\n    this.anims.create({\r\n      key: \"blaze\",\r\n      duration: 50,\r\n      frames: this.anims.generateFrameNames(\"daze\", {\r\n        prefix: \"fire0\",\r\n        suffix: \".png\",\r\n        end: 35,\r\n      }),\r\n      showOnStart: true,\r\n      hideOnComplete: true,\r\n    });\r\n\r\n    this.textures.addSpriteSheetFromAtlas(\"hooded\", {\r\n      frameWidth: 64,\r\n      frameHeight: 64,\r\n      atlas: \"characters\",\r\n      frame: \"hooded\",\r\n    });\r\n\r\n    this.anims.create({\r\n      key: \"sword_left\",\r\n      frameRate: 5,\r\n      frames: this.anims.generateFrameNumbers(\"rapier\", {\r\n        start: 6,\r\n        end: 11\r\n      }),\r\n      showOnStart: true,\r\n      hideOnComplete: true,\r\n    });\r\n\r\n\r\n    this.load.image(\"terrain\", \"./assets/image/terrain_atlas.png\");\r\n    this.load.image(\"items\", \"./assets/image/items.png\");\r\n\r\n    this.load.tilemapTiledJSON(\"mappy\", \"./assets/maps/map.json\");\r\n  }\r\n\r\n  create() {\r\n    console.log(this.textures.getTextureKeys());\r\n\r\n    this.player = this.add\r\n      .container(200, 200, [\r\n        this.add.sprite(0, 0, \"mandy\", 26),\r\n        this.add.sprite(0, 0, \"rapier\").setVisible(false)\r\n      ])\r\n      .setDepth(1)\r\n      .setScale(2);\r\n    \r\n    this.input.keyboard.on(\"keydown-F\", () => {\r\n      (this.player.list[0] as Phaser.GameObjects.Sprite).play(\"mandyswordleft\");\r\n      (this.player.list[1] as Phaser.GameObjects.Sprite).play(\"sword_left\");\r\n    });\r\n\r\n    // this.anna = this.physics.add.sprite(400, 400, \"anna\", 26).setScale(2);\r\n    this.anna = new CharacterSprite(this, 400, 400, \"anna\", 26);\r\n    this.anna.setDepth(2);\r\n    this.hooded = this.physics.add\r\n      .sprite(200, 200, \"hooded\", 26)\r\n      .setScale(2)\r\n      .setImmovable(true);\r\n\r\n    this.assassins = this.physics.add.group({ immovable: true });\r\n    this.assassins.add(this.hooded);\r\n\r\n    this.fireAttacks = this.physics.add.group();\r\n\r\n    //@ts-ignore\r\n    this.keyboard = this.input.keyboard.addKeys(\"W, A, S, D\");\r\n\r\n    //@ts-ignore\r\n    window.hooded = this.hooded;\r\n    window.anna = this.anna;\r\n\r\n    // set smaller hitbox\r\n    this.anna.setSize(40, 20).setOffset(12, 42);\r\n    // this.anna.body.setCircle(20);\r\n\r\n    this.input.on(\"pointermove\", (pointer: Phaser.Input.Pointer) => {\r\n      if (pointer.isDown) {\r\n        // is clicking\r\n        let fire = this.add\r\n          .sprite(pointer.worldX, pointer.worldY, \"daze\", \"fire00.png\")\r\n          .play(\"blaze\");\r\n        this.fireAttacks.add(fire);\r\n        fire.on(\"animationcomplete\", () => {\r\n          fire.destroy();\r\n        });\r\n      }\r\n    });\r\n\r\n    this.physics.world.addCollider(\r\n      this.anna,\r\n      this.assassins,\r\n      //@ts-ignore\r\n      (anna: CharacterSprite, hooded: Phaser.Physics.Arcade.Sprite) => {\r\n        anna.hp--;\r\n\r\n        if (anna.hp <= 0) {\r\n          anna.destroy();\r\n        }\r\n\r\n        hooded.destroy();\r\n      }\r\n    );\r\n\r\n    this.physics.world.addCollider(\r\n      this.fireAttacks,\r\n      this.assassins,\r\n      //@ts-ignore\r\n      (\r\n        fireAttacks: Phaser.Physics.Arcade.Sprite,\r\n        hooded: Phaser.Physics.Arcade.Sprite\r\n      ) => {\r\n        fireAttacks.destroy();\r\n        hooded.destroy();\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n        switch (Phaser.Math.Between(0, 1)) {\r\n          case 0:\r\n            x = Phaser.Math.Between(0, this.game.renderer.width);\r\n            break;\r\n          case 1:\r\n            y = Phaser.Math.Between(0, this.game.renderer.height);\r\n            break;\r\n        }\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n          this.assassins.add(\r\n            this.physics.add\r\n              .sprite(x, y, \"hooded\", 26)\r\n              .setScale(2)\r\n              .setImmovable(true)\r\n          );\r\n        }\r\n      }\r\n    );\r\n\r\n    let mappy = this.add.tilemap(\"mappy\");\r\n\r\n    let terrain = mappy.addTilesetImage(\"terrain_atlas\", \"terrain\");\r\n    let itemset = mappy.addTilesetImage(\"items\");\r\n\r\n    // layers\r\n    let terrainLayer = mappy\r\n      .createStaticLayer(\"terrain\", [terrain], 0, 0)\r\n      .setDepth(-1);\r\n    let topLayer = mappy.createStaticLayer(\"top\", [terrain], 0, 0);\r\n\r\n    // map collisions\r\n    this.physics.add.collider(this.anna, topLayer);\r\n    this.physics.add.collider(this.assassins, topLayer);\r\n    // by tile property\r\n    topLayer.setCollisionByProperty({ collides: true });\r\n\r\n    // map events\r\n    topLayer.setTileLocationCallback(3, 3, 1, 1, () => {\r\n      alert(\"faggot!\");\r\n      // @ts-ignore\r\n      topLayer.setTileLocationCallback(3, 3, 1, 1, null);\r\n    });\r\n\r\n    // interactive objects from object layer\r\n    let items = mappy\r\n      .createFromObjects(\"mushrooms\", 1019, { key: CST.SPRITE.CAT })\r\n      .map((sprite: Phaser.GameObjects.Sprite) => {\r\n        sprite.setScale(2);\r\n        sprite.setInteractive();\r\n      });\r\n\r\n    this.input.on(\r\n      \"gameobjectdown\",\r\n      (pointer: Phaser.Input.Pointer, obj: Phaser.GameObjects.Sprite) => {\r\n        obj.destroy();\r\n      }\r\n    );\r\n\r\n    this.input.on(\"pointerdown\", (pointer: Phaser.Input.Pointer) => {\r\n      // pixel position to tile position\r\n      let tile = mappy.getTileAt(\r\n        mappy.worldToTileX(pointer.x),\r\n        mappy.worldToTileY(pointer.y)\r\n      );\r\n\r\n      if (tile) {\r\n        console.log(tile);\r\n      }\r\n    });\r\n\r\n    this.cameras.main.startFollow(this.anna);\r\n    this.physics.world.setBounds(\r\n      0,\r\n      0,\r\n      mappy.widthInPixels,\r\n      mappy.heightInPixels\r\n    );\r\n\r\n    // draw debug render hitboxes\r\n    // topLayer.renderDebug(this.add.graphics(), {});\r\n  }\r\n\r\n  update(time: number, delta: number) {\r\n    // delta 16.666 @ 60fps\r\n\r\n    if (this.anna.active) {\r\n      for (let i = 0; i < this.assassins.getChildren().length; i++) {\r\n        this.physics.accelerateToObject(\r\n          this.assassins.getChildren()[i],\r\n          this.anna\r\n        );\r\n      }\r\n\r\n      if (this.keyboard.D.isDown) {\r\n        this.anna.setVelocityX(128);\r\n      }\r\n\r\n      if (this.keyboard.A.isDown) {\r\n        this.anna.setVelocityX(-128);\r\n      }\r\n\r\n      if (this.keyboard.W.isDown) {\r\n        this.anna.setVelocityY(-128);\r\n      }\r\n\r\n      if (this.keyboard.S.isDown) {\r\n        this.anna.setVelocityY(128);\r\n      }\r\n\r\n      if (this.keyboard.D.isUp && this.keyboard.A.isUp) {\r\n        this.anna.setVelocityX(0);\r\n      }\r\n\r\n      if (this.keyboard.W.isUp && this.keyboard.S.isUp) {\r\n        this.anna.setVelocityY(0);\r\n      }\r\n\r\n      if (this.anna.body.velocity.x > 0) {\r\n        this.anna.play(\"right\", true);\r\n      } else if (this.anna.body.velocity.x < 0) {\r\n        this.anna.anims.playReverse(\"left\", true);\r\n      } else if (this.anna.body.velocity.y < 0) {\r\n        this.anna.play(\"up\", true);\r\n      } else if (this.anna.body.velocity.y > 0) {\r\n        this.anna.play(\"down\", true);\r\n      }\r\n    }\r\n  }\r\n}\r\n","/** @type {import(\"../typings/phaser\")} */\r\n\r\nimport { LoadScene } from './scenes/LoadScene';\r\nimport { MenuScene } from './scenes/MenuScene';\r\nimport { PlayScene } from './scenes/PlayScene';\r\n\r\nlet game = new Phaser.Game({\r\n  width: 800,\r\n  height: 600,\r\n\r\n  scene: [\r\n    LoadScene,\r\n    MenuScene,\r\n    PlayScene\r\n  ],\r\n\r\n  render: {\r\n    pixelArt: true\r\n  },\r\n\r\n  physics: {\r\n    default: \"arcade\",\r\n    arcade: {\r\n      debug: true\r\n    }\r\n  },\r\n\r\n  scale: {\r\n    mode: Phaser.Scale.FIT,\r\n    autoCenter: Phaser.Scale.CENTER_BOTH\r\n  }\r\n});"]}